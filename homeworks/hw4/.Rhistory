q()
q()
update()
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
hist(sample$loan_default)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
#Logistic Regression
log_reg = lm(sample$loan_default ~ sample$loan_amnt + sample$adjusted_annual_inc + sample$pct_loan_income + sample$dti + sample$residence_property + sample$months_since_first_credit + sample$inq_last_6mths + sample$open_acc + sample$bc_util + sample$num_accts_ever_120_pd + sample$pub_rec_bankruptcies)
summary(log_reg)
#Naive Bayes
NVmodeled <- naiveBayes(loan_default ~ ., data = train)
NVmodeled
preds <- predict(NVmodeled, newdata = test)
conf_matrix <- table(test$loan_default, preds)
conf_matrix
confusionMatrix(conf_matrix)
#Naive Bayes
NVmodeled <- naiveBayes(loan_default ~ ., data = train)
NVmodeled
NVmodeled$apriori
NVmodeled$tables
#Naive Bayes
NVmodeled <- naiveBayes(loan_default ~ ., data = train)
NVmodeled$tables
NVmodeled$apriori
NVmodeled
NVmodeled$tables
NVmodeled$apriori
preds <- predict(NVmodeled, newdata = test)
conf_matrix <- table(test$loan_default, preds)
conf_matrix
confusionMatrix(conf_matrix)
preds <- predict(NVmodeled, newdata = test)
conf_matrix <- table(test$loan_default, preds)
NVmodeled$tables
NVmodeled$apriori
conf_matrix
confusionMatrix(conf_matrix)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part2.R", echo=TRUE)
#Naive Bayes
NVmodeled <- naiveBayes(loan_default ~ ., data = train)
preds <- predict(NVmodeled, newdata = test)
conf_matrix <- table(test$loan_default, preds)
predsRaws <- predict(NVmodeled, newdata = test, type = "raw")
predsRaws
NVmodeled$apriori
#Naive Bayes
NVmodeled <- naiveBayes(loan_default ~ ., data = train)
preds <- predict(NVmodeled, newdata = test)
conf_matrix <- table(test$loan_default, preds)
predsRaws <- predict(NVmodeled, newdata = test, type = "raw")
predsRaws
NVmodeled$apriori
##########ROC STUFF########################
# Compute AUC for predicting Class with the model
prob <- predict(NVmodeled, newdata=test, type="raw")
pred <- prediction(prob[,2], test$loan_default)
perf <- performance(pred, measure = "tpr", x.measure = "fpr")
#following order: bottom, left, top, and right.
par(mar=c(5,8,1,.5))
#Receiver operating characteristic
plot(perf, col="red")
abline(a=0, b=1)
auc <- performance(pred, measure = "auc")
auc <- auc@y.values[[1]]
auc
rocData = data.frame(c(perf@alpha.values, perf@x.values, perf@y.values))
summary(multiple_regression)
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw3/hw3_part1.R", echo=TRUE)
library(readxl)
library(arules)
library(arulesViz)
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
bread_basket <- read_excel("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw4/BreadBasket_DMS.xlsx")
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
pwd
getwd()
ls
getwd()
cd ..
setwd("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw4")
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
transactions <- split(bread_basket$Item, bread_basket$Transaction)
transactions <- as(transactions, "transactions")
rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
top_rules <- head(sort(rules_filtered, by = "lift"), 5)
inspect(top_rules)
View(top_rules)
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
bread_basket <- bread_basket[!(bread_basket$Item=="NONE"),]
transactions <- split(bread_basket$Item, bread_basket$Transaction)
transactions <- as(transactions, "transactions")
rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
top_rules <- head(sort(rules_filtered, by = "lift"), 5)
inspect(top_rules)
View(rules_filtered)
bread_basket <- bread_basket[!(bread_basket$Item=="NONE"),]
num_transactions <- nrow(bread_basket)
num_items <- length(unique(bread_basket$Item))
avg_items_per_transaction <- mean(table(bread_basket$Transaction))
cat("Number of transactions:", num_transactions, "\n")
cat("Number of unique items:", num_items, "\n")
cat("Average items per transaction:", avg_items_per_transaction, "\n")
item_counts <- table(bread_basket$Item)
top_items <- names(sort(item_counts, decreasing = TRUE)[1:10])
cat("Top 10 most popular items:\n")
cat(paste(top_items, collapse = "\n"))
transactions <- split(bread_basket$Item, bread_basket$Transaction)
transactions <- as(transactions, "transactions")
rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
top_rules <- head(sort(rules_filtered, by = "lift"), 5)
inspect(top_rules)
View(bread_basket)
View(bread_basket)
# transactions <- split(bread_basket$Item, bread_basket$Transaction)
# transactions <- as(transactions, "transactions")
#
# rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
#
# rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
#
# top_rules <- head(sort(rules_filtered, by = "lift"), 5)
#
# inspect(top_rules)
rm()
# transactions <- split(bread_basket$Item, bread_basket$Transaction)
# transactions <- as(transactions, "transactions")
#
# rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
#
# rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
#
# top_rules <- head(sort(rules_filtered, by = "lift"), 5)
#
# inspect(top_rules)
rm()
# transactions <- split(bread_basket$Item, bread_basket$Transaction)
# transactions <- as(transactions, "transactions")
#
# rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
#
# rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
#
# top_rules <- head(sort(rules_filtered, by = "lift"), 5)
#
# inspect(top_rules)
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(plyr)
library(dplyr)
library(arules)
library(arules)
library(arules)
library(arules)
library(arules)
library(arules)
library(arules)
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(plyr)
library(dplyr)
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
nrow(bread_basket)
bread_basket <- bread_basket[!(bread_basket$Item=="NONE"),]
nrow(bread_basket)
bread_basket <- bread_basket[complete.cases(bread_basket), ]
nrow(bread_basket)
library(readxl)
library(arules)
library(arulesViz)
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
bread_basket <- bread_basket[!(bread_basket$Item=="NONE"),]
num_transactions <- nrow(bread_basket)
num_items <- length(unique(bread_basket$Item))
avg_items_per_transaction <- mean(table(bread_basket$Transaction))
cat("Number of transactions:", num_transactions, "\n")
cat("Number of unique items:", num_items, "\n")
cat("Average items per transaction:", avg_items_per_transaction, "\n")
item_counts <- table(bread_basket$Item)
top_items <- names(sort(item_counts, decreasing = TRUE)[1:10])
cat("Top 10 most popular items:\n")
cat(paste(top_items, collapse = "\n"))
transactions <- split(bread_basket$Item, bread_basket$Transaction)
transactions <- as(transactions, "transactions")
rules <- apriori(transactions, parameter = list(support = 0.02, confidence = 0.5))
rules_filtered <- subset(rules, !(rhs %in% "Coffee"))
top_rules <- head(sort(rules_filtered, by = "lift"), 5)
inspect(top_rules)
View(top_rules)
summary(rules)
sumary(rules[1:5])
summary(rules[1:5])
summary(rules)
summary(rules[1:5])
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw4/hw4.R", echo=TRUE)
bread_basket <- bread_basket[complete.cases(bread_basket), ]
View(rules_filtered)
bread_basket$Item = as.factor(bread_basket$Item)
#Converts character data to date. Store InvoiceDate as date in new variable
bread_basket$TransDate <- as.Date(bread_basket$Date)
#Extract time from InvoiceDate and store in another variable
bread_basket$TransTime<- format(bread_basket$Time,"%H:%M:%S")
#Convert and edit InvoiceNo into numeric
bread_basket$Transaction <- as.numeric(as.character(bread_basket$Transaction))
#get a glimpse of your data
glimpse(bread_basket)
#ddply(dataframe, variables_to_be_used_to_split_data_frame, function_to_be_applied)
transactionData <- ddply(retail,c("Transaction","Date"),
function(df1)paste(df1$Description, collapse = ","))
#ddply(dataframe, variables_to_be_used_to_split_data_frame, function_to_be_applied)
transactionData <- ddply(bread_basket,c("Transaction","Date"),
function(df1)paste(df1$Description, collapse = ","))
#ddply(dataframe, variables_to_be_used_to_split_data_frame, function_to_be_applied)
transactionData <- ddply(bread_basket,c("Transaction","Date"),
function(df1)paste(df1$Item, collapse = ","))
#The R function paste() concatenates vectors to character and separated results using collapse=[any optional charcater string ]. Here ',' is used
transactionData
#set column InvoiceNo of dataframe transactionData
transactionData$Transaction <- NULL
#set column Date of dataframe transactionData
transactionData$Date <- NULL
#Rename column to items
colnames(transactionData) <- c("items")
#Show Dataframe transactionData
transactionData
write.csv(transactionData,"market_basket_transactions.csv", quote = FALSE, row.names = FALSE)
tr <- read.transactions("market_basket_transactions.csv", format = 'basket', sep=',')
tr
summary(tr)
# Create an item frequency plot for the top 20 items
if (!require("RColorBrewer")) {
# install color package of R
install.packages("RColorBrewer")
#include library RColorBrewer
library(RColorBrewer)
}
#mar - A numeric vector of length 4, which sets the margin sizes in the
#following order: bottom, left, top, and right.
#The default is c(5.1, 4.1, 4.1, 2.1).
par(mar=c(0,10,1,.1))
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(tr, parameter = list(supp=0.01, conf=0.8,maxlen=10))
summary(association.rules)
association.rules <- apriori(tr, parameter = list(supp=0.01, conf=0.8,maxlen=10))
summary(association.rules)
inspect(association.rules[1:5])
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
#mar - A numeric vector of length 4, which sets the margin sizes in the
#following order: bottom, left, top, and right.
#The default is c(5.1, 4.1, 4.1, 2.1).
par(mar=c(0,10,1,.1))
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.8,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw4/hw4.R", echo=TRUE)
association.rules <- apriori(tr, parameter = list(supp=0.005, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
association.rules <- apriori(tr, parameter = list(supp=0.01, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
association.rules <- apriori(tr, parameter = list(supp=0.001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
inspect(SubRulesNoCoffee[1:2])
inspect(SubRulesNoCoffee[1:3])
association.rules <- apriori(tr, parameter = list(supp=0.0001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:3])
inspect(SubRulesNoCoffee[1:5])
inspect(association.rules[1:5])
inspect(SubRulesNoCoffee[1:5])
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
inspect(association.rules[1:5])
inspect(association.rules[1:5])
num_transactions <- nrow(bread_basket)
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
bread_basket <- bread_basket[!(bread_basket$Item=="NONE"),]
nrow(bread_basket)
bread_basket <- bread_basket[complete.cases(bread_basket), ]
bread_basket$Item = as.factor(bread_basket$Item)
num_transactions <- nrow(bread_basket)
num_items <- length(unique(bread_basket$Item))
avg_items_per_transaction <- mean(table(bread_basket$Transaction))
item_counts <- table(bread_basket$Item)
top_items <- names(sort(item_counts, decreasing = TRUE)[1:10])
cat("Number of transactions:", num_transactions, "\n")
cat("Number of unique items:", num_items, "\n")
cat("Average items per transaction:", avg_items_per_transaction, "\n")
cat("Top 10 most popular items:\n")
cat(paste(top_items, collapse = "\n"))
#Converts character data to date. Store InvoiceDate as date in new variable
bread_basket$TransDate <- as.Date(bread_basket$Date)
#Extract time from InvoiceDate and store in another variable
bread_basket$TransTime<- format(bread_basket$Time,"%H:%M:%S")
#Convert and edit InvoiceNo into numeric
bread_basket$Transaction <- as.numeric(as.character(bread_basket$Transaction))
#get a glimpse of your data
glimpse(bread_basket)
#ddply(dataframe, variables_to_be_used_to_split_data_frame, function_to_be_applied)
transactionData <- ddply(bread_basket,c("Transaction","Date"),
function(df1)paste(df1$Item, collapse = ","))
#The R function paste() concatenates vectors to character and separated results using collapse=[any optional charcater string ]. Here ',' is used
transactionData
#set column InvoiceNo of dataframe transactionData
transactionData$Transaction <- NULL
#set column Date of dataframe transactionData
transactionData$Date <- NULL
#Rename column to items
colnames(transactionData) <- c("items")
#Show Dataframe transactionData
transactionData
write.csv(transactionData,"market_basket_transactions.csv", quote = FALSE, row.names = FALSE)
tr <- read.transactions("market_basket_transactions.csv", format = 'basket', sep=',')
tr
summary(tr)
# Create an item frequency plot for the top 20 items
if (!require("RColorBrewer")) {
# install color package of R
install.packages("RColorBrewer")
#include library RColorBrewer
library(RColorBrewer)
}
#mar - A numeric vector of length 4, which sets the margin sizes in the
#following order: bottom, left, top, and right.
#The default is c(5.1, 4.1, 4.1, 2.1).
par(mar=c(0,10,1,.1))
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
#mar - A numeric vector of length 4, which sets the margin sizes in the
#following order: bottom, left, top, and right.
#The default is c(5.1, 4.1, 4.1, 2.1).
par(mar=c(0,10,1,.1))
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(tr, parameter = list(supp=0.0001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
source("C:/Users/udaya/Desktop/Spring2023/cmsc462/homeworks/hw4/hw4.R", echo=TRUE)
warnings()
library(arules)
library(arulesViz)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(plyr)
library(dplyr)
bread_basket <- read_excel("BreadBasket_DMS.xlsx")
bread_basket <- bread_basket[!(bread_basket$Item=="NONE"),]
nrow(bread_basket)
bread_basket <- bread_basket[complete.cases(bread_basket), ]
bread_basket$Item = as.factor(bread_basket$Item)
#Converts character data to date. Store InvoiceDate as date in new variable
bread_basket$TransDate <- as.Date(bread_basket$Date)
#Extract time from InvoiceDate and store in another variable
bread_basket$TransTime<- format(bread_basket$Time,"%H:%M:%S")
#Convert and edit InvoiceNo into numeric
bread_basket$Transaction <- as.numeric(as.character(bread_basket$Transaction))
#get a glimpse of your data
glimpse(bread_basket)
#ddply(dataframe, variables_to_be_used_to_split_data_frame, function_to_be_applied)
transactionData <- ddply(bread_basket,c("Transaction","Date"),
function(df1)paste(df1$Item, collapse = ","))
#The R function paste() concatenates vectors to character and separated results using collapse=[any optional charcater string ]. Here ',' is used
transactionData
#set column InvoiceNo of dataframe transactionData
transactionData$Transaction <- NULL
#set column Date of dataframe transactionData
transactionData$Date <- NULL
#Rename column to items
colnames(transactionData) <- c("items")
#Show Dataframe transactionData
transactionData
write.csv(transactionData,"market_basket_transactions.csv", quote = FALSE, row.names = FALSE)
tr <- read.transactions("market_basket_transactions.csv", format = 'basket', sep=',')
tr
summary(tr)
# Create an item frequency plot for the top 20 items
if (!require("RColorBrewer")) {
# install color package of R
install.packages("RColorBrewer")
#include library RColorBrewer
library(RColorBrewer)
}
#mar - A numeric vector of length 4, which sets the margin sizes in the
#following order: bottom, left, top, and right.
#The default is c(5.1, 4.1, 4.1, 2.1).
par(mar=c(0,10,1,.1))
itemFrequencyPlot(tr,topN=20,type="absolute",col=brewer.pal(8,'Pastel2'), main="Absolute Item Frequency Plot")
association.rules <- apriori(tr, parameter = list(supp=0.0001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
num_transactions <- nrow(bread_basket)
num_items <- length(unique(bread_basket$Item))
avg_items_per_transaction <- mean(table(bread_basket$Transaction))
item_counts <- table(bread_basket$Item)
top_items <- names(sort(item_counts, decreasing = TRUE)[1:10])
cat("Number of transactions:", num_transactions, "\n")
cat("Number of unique items:", num_items, "\n")
cat("Average items per transaction:", avg_items_per_transaction, "\n")
cat("Top 10 most popular items:\n")
cat(paste(top_items, collapse = "\n"))
summary(bread_basket)
describe(bread_basket)
summary(bread_basket)
cat("Number of transactions:", num_transactions, "\n")
cat("Number of unique items:", num_items, "\n")
cat("Average items per transaction:", avg_items_per_transaction, "\n")
cat("Top 10 most popular items:\n")
cat(paste(top_items, collapse = "\n"))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
association.rules <- apriori(tr, parameter = list(supp=0.00001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
association.rules <- apriori(tr, parameter = list(supp=0.0001, conf=0.5,maxlen=10,minlen=2))
SubRulesNoCoffee = subset(association.rules, subset = !(rhs %in% "Coffee"))
summary(association.rules)
inspect(association.rules[1:5])
summary(SubRulesNoCoffee)
inspect(SubRulesNoCoffee[1:5])
summary(bread_basket$Transaction)
